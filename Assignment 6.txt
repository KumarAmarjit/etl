package me.longcb.backendassignment.service

import me.longcb.backendassignment.entity.StaffEntity
import me.longcb.backendassignment.repository.SuperiorRepository
import me.longcb.backendassignment.service.impl.StaffServiceImpl
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.Mockito
import org.mockito.exceptions.misusing.PotentialStubbingProblem
import org.mockito.junit.jupiter.MockitoExtension

@ExtendWith(MockitoExtension::class)
class StaffServiceTest {
    @InjectMocks
    private lateinit var staffService: StaffServiceImpl

    @Mock
    private lateinit var superiorRepository: SuperiorRepository

    @BeforeEach
    fun setup() {
        val superior = StaffEntity("Boss")
        Mockito.`when`(superiorRepository.getSuperiors("Employee")).thenReturn(listOf(superior))
    }

    @Test
    fun whenValidStaffName_thenBossShouldBeFound() {
        val superiors = staffService.getSuperiors("Employee")
        assertThat(superiors[0].name).isEqualTo("Boss")
    }

    @Test
    fun whenInvalidStaffName_thenBossShouldNotBeFound() {
        assertThrows<PotentialStubbingProblem> { staffService.getSuperiors("Non existed Employee") }
    }
} 


/////////////////////////////



package me.longcb.backendassignment.service

import me.longcb.backendassignment.entity.UserEntity
import me.longcb.backendassignment.model.Login
import me.longcb.backendassignment.repository.UserRepository
import me.longcb.backendassignment.service.impl.UserServiceImpl
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.ArgumentMatchers.anyString
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.Mockito
import org.mockito.junit.jupiter.MockitoExtension
import org.springframework.security.crypto.password.PasswordEncoder

@ExtendWith(MockitoExtension::class)
class UserServiceTest {
    @InjectMocks
    private lateinit var userService: UserServiceImpl

    @Mock
    private lateinit var userRepository: UserRepository

    @Mock
    private lateinit var passwordEncoder: PasswordEncoder

    @Test
    fun givenUser_whenRightUserAndPassword_thenReturnUser() {
        val user = UserEntity(userName, password)
        Mockito.`when`(userRepository.findByName(userName)).thenReturn(user)
        Mockito.`when`(passwordEncoder.matches(anyString(), anyString())).thenReturn(true)

        val currentUser = userService.checkLoginAndGetUser(Login(userName, password))
        Assertions.assertEquals(user, currentUser)
    }

    @Test
    fun givenUser_whenRightUserButWrongPassword_thenReturnNull() {
        val user = UserEntity(userName, password)
        Mockito.`when`(userRepository.findByName(userName)).thenReturn(user)
        Mockito.`when`(passwordEncoder.matches(anyString(), anyString())).thenReturn(false)

        val currentUser = userService.checkLoginAndGetUser(Login(userName, password))
        Assertions.assertNull(currentUser)
    }

    @Test
    fun givenUser_whenEmptyUserAndPassword_thenReturnNull() {
        val user1 = userService.checkLoginAndGetUser(Login("", ""))
        val user2 = userService.checkLoginAndGetUser(Login(null, ""))
        val user3 = userService.checkLoginAndGetUser(Login("", null))
        val user4 = userService.checkLoginAndGetUser(Login(null, null))
        Assertions.assertNull(user1)
        Assertions.assertNull(user2)
        Assertions.assertNull(user3)
        Assertions.assertNull(user4)
    }

    companion object {
        const val userName = "abc"
        const val password = "123456"
    }
}
 
//////////////////////////////


@@ -0,0 +1,20 @@
package me.longcb.backendassignment.utils

import me.longcb.backendassignment.entity.AbstractEntity
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager
import java.time.LocalDateTime
import javax.persistence.EntityManager

fun fakeAuditTime(vararg entities: AbstractEntity<out Long>) {
    entities.forEach { e ->
        e.createdAt = LocalDateTime.now()
        e.updatedAt = LocalDateTime.now()
    }
}

fun persist(em: TestEntityManager, vararg entities: AbstractEntity<out Long>) {
    entities.forEach { e -> em.persist(e) }
}
fun persist(em: EntityManager, vararg entities: AbstractEntity<out Long>) {
    entities.forEach { e -> em.persist(e) }
}